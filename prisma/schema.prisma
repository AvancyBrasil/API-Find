// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  nome        String   
  cpf         String
  dataNasc    String
  telefone    String
  cep         String
  logradouro  String
  bairro      String
  cidade      String
  email       String  @unique
  senha       String
  fotoPerfil  String?
  status           Boolean  @default(true)
  tipo        String   @default("cliente")
}
  
model Lojista {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  imagemLojista String?
  nome         String
  sobrenome    String
  nomeEmpresa  String
  cnpj         String
  cep          String?
  logradouro   String?
  cidade       String?
  estado       String?
  numContato   String?
  numEstab     String?
  email        String   @unique
  senha        String
  produtos     Produto[] @relation("LojistaProdutos")
  latitude     Float?
  longitude    Float?
  categoria    String? 
  rating       Float?
  subcategoria String?
  biografia    String?
  avaliacao    Float? 
  horarioFuncionamento String?
  descricao    String?
  status       Boolean  @default(true)
  tipo         String   @default("lojista")
}


model Produto {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  nome          String
  preco         String?
  descricao     String?
  imagemProduto String?
  idLojista     String   @db.ObjectId
  lojista       Lojista  @relation("LojistaProdutos", fields: [idLojista], references: [id], onDelete: Cascade)
  categoria     String?  // Categoria do produto
  rating        Float?   // Avaliação média do produto
  subcategoria  String?
  avaliacao     Float?
  status           Boolean  @default(true) // Para controlar se o produto está ativo ou não
  @@index([idLojista])
}

model Validacao {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  sobrenome    String
  nomeEmpresa  String
  cnpj         String
  cep          String?
  logradouro   String?
  cidade       String?
  estado       String?
  numContato   String?
  numEstab     String?
  email        String   @unique
  senha        String
}
